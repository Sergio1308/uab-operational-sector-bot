import logging

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, ExceptionTypeFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ErrorEvent
from aiogram.utils.markdown import hbold

from bot.inlinekeyboard import create_back_to_new_app_markup, create_back_to_room_markup, \
    create_types_of_appeal_markup, create_starting_new_app_markup, delete_message_app_group_markup
from bot.models import Application
from bot.states import Form
from bot.filters import IsAdmin
from config import bot, get_group_chat_id

message_router = Router()
message_router.message.filter(F.chat.type == "private")


@message_router.message(Command("start"))
async def start_command(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.address)
    await message.answer(f"–í—ñ—Ç–∞—é!\n–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—Éüëá:")


@message_router.message(Command("cancel"))
async def cancel_operation(message: Message, state: FSMContext) -> None:
    if await state.get_state() is None:
        await message.answer("–í–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è")
    else:
        await state.clear()
        await message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ")


@message_router.message(Form.address)
async def process_address(message: Message, state: FSMContext) -> None:
    await state.update_data(address=message.text)
    await state.set_state(Form.room)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏ –∞–±–æ –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—èüëá:",
                         reply_markup=create_back_to_new_app_markup())


@message_router.message(Form.room)
async def process_room(message: Message, state: FSMContext) -> None:
    await state.update_data(room=message.text)
    await state.set_state(Form.full_name)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –üI–ë (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ)üëá:", reply_markup=create_back_to_room_markup())


@message_router.message(Form.full_name)
async def process_full_name(message: Message, state: FSMContext) -> None:
    await state.update_data(full_name=message.text)
    await state.set_state(Form.phone_number)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—Éüëá:")


@message_router.message(Form.phone_number)
async def process_phone_number(message: Message, state: FSMContext) -> None:
    # don't need a phone number validation. User is supposed to enter a custom number
    await state.update_data(phone_number=message.text)
    await state.set_state(Form.type_of_appeal)
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∑–≤–µ—Ä–Ω–µ–Ω–Ω—èüëá:", reply_markup=create_types_of_appeal_markup())


@message_router.message(Form.message)
async def process_appeal_message(message: Message, state: FSMContext) -> None:
    await state.update_data(message=message.text)
    try:
        user_data = await state.get_data()
        app = Application(
            user_data['address'], user_data['room'], user_data['full_name'],
            user_data['phone_number'], user_data['type_of_appeal'], user_data['message']
        )
        await state.update_data(application_model=app)
        group_chat_id = get_group_chat_id()
        if group_chat_id:
            await bot.send_message(
                group_chat_id,
                f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {hbold(app.address)}"
                f"\n\n–ö—ñ–º–Ω–∞—Ç–∞: {hbold(app.cabinet)}"
                f"\n\n–ó–∞—è–≤–∫–∞ –≤—ñ–¥: {hbold(app.full_name)}"
                f"\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {hbold(app.contact_number)}"
                f"\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: {hbold(app.type_of_appeal)}"
                f"\n\n–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: '{hbold(app.text_message)}'",
                reply_markup=delete_message_app_group_markup()
            )
            await message.answer(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –î—è–∫—É—é –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!",
                                 reply_markup=create_starting_new_app_markup())
        else:
            logging.warning(f"Failed to send application from user {message.from_user}."
                            f"\nAdministrator did not add this bot to the group chat for receiving applications."
                            f"\nCurrent application: {app}")
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ "
                                 "–Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç –¥–ª—è —ó—Ö –æ—Ç—Ä–∏–º–∞–Ω–Ω—è")
    except Exception as err:
        logging.error(f"Error processing application: {err}")
        await message.answer(f"–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! –ó–∞–ª–∏—à—Ç–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–æ–≤—É, –¥–ª—è —Ü—å–æ–≥–æ –≤–≤–µ–¥i—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
    await state.clear()


@message_router.message(Command("check"), IsAdmin())
async def check_sending_to_group_chat(message: Message) -> None:
    chat_id = get_group_chat_id()
    if chat_id is None:
        await message.answer('–Ø —â–µ –Ω–µ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –¥–æ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É –¥–ª—è –ø—Ä–∏–π–æ–º—É –∑–∞—è–≤–æ–∫! '
                             '–ó–∞—è–≤–∫–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É—Ç—å—Å—è!')
        return
    await message.answer(f'–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω–µ! –ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —è –ø–µ—Ä–µ–±—É–≤–∞—é –≤ –≥—Ä—É–ø—ñ –∑ ID=[{chat_id}], '
                         f'–∑–∞—Ä–∞–∑ —è —Å–ø—Ä–æ–±—É—é –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—É–¥–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!')
    try:
        await bot.send_message(chat_id,
                               '–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä/–≤–ª–∞—Å–Ω–∏–∫ –±–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, '
                               '—â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, –∫—É–¥–∏ —è –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –∑–∞—è–≤–∫–∏.\n–ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è —Å—é–¥–∏.')
    except TelegramBadRequest:
        await message.answer('–ü–æ–º–∏–ª–∫–∞! –ì—Ä—É–ø–æ–≤–∏–π —á–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤i–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤i–¥–æ–º–ª–µ–Ω–Ω—è.'
                             '\n–î–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—É –≥—Ä—É–ø—É —â–µ —Ä–∞–∑ (—è–∫—â–æ —è —Ç–∞–º –≤–∂–µ —î, '
                             '—Ç–æ–¥—ñ –≤–∏–¥–∞–ª—ñ—Ç—å —ñ –¥–æ–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ)')


@message_router.message()
async def process_other_messages(message: Message) -> None:
    try:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É "
                             "/start,\n–∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")
    except TypeError:
        await message.answer("–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! –ó–∞–ª–∏—à—Ç–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–æ–≤—É, –¥–ª—è —Ü—å–æ–≥–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start")


@message_router.error(ExceptionTypeFilter(Exception))
async def handle_private_chat_errors(event: ErrorEvent):
    logging.exception("Exception caused by %s", event.exception, exc_info=True)


@message_router.errors
async def handle_private_chat_errors(event: ErrorEvent):
    logging.critical("Critical error caused by %s", event.exception, exc_info=True)
